import java.util.*;
import java.util.stream.Collectors;

class Product {
    private String name;
    private double price;
    private String category;

    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String getName() { return name; }
    public double getPrice() { return price; }
    public String getCategory() { return category; }

    @Override
    public String toString() {
        return name + " - $" + String.format("%.2f", price) + " (" + category + ")";
    }
}

class Electronics extends Product {
    private int warrantyMonths;

    public Electronics(String name, double price, int warrantyMonths) {
        super(name, price, "Electronics");
        this.warrantyMonths = warrantyMonths;
    }

    public int getWarrantyMonths() { return warrantyMonths; }
}

class Clothing extends Product {
    private String size;
    private String fabric;

    public Clothing(String name, double price, String size, String fabric) {
        super(name, price, "Clothing");
        this.size = size;
        this.fabric = fabric;
    }

    public String getSize() { return size; }
    public String getFabric() { return fabric; }
}

class Grocery extends Product {
    private String expirationDate;
    private boolean isPerishable;

    public Grocery(String name, double price, String expirationDate, boolean isPerishable) {
        super(name, price, "Grocery");
        this.expirationDate = expirationDate;
        this.isPerishable = isPerishable;
    }

    public String getExpirationDate() { return expirationDate; }
    public boolean isPerishable() { return isPerishable; }
}

abstract class User {
    private String username;

    public User(String username) {
        this.username = username;
    }

    public String getUsername() {
        return username;
    }
}

class Customer extends User {
    private List<Product> cart;

    public Customer(String username) {
        super(username);
        this.cart = new ArrayList<>();
    }

    public void addToCart(Product product) {
        cart.add(product);
        System.out.println(product.getName() + " has been added to your cart.");
    }

    public void showCart() {
        System.out.println("\nYour Cart:");
        if (cart.isEmpty()) {
            System.out.println("Your cart is empty.");
        } else {
            cart.forEach(System.out::println);
        }
    }

    public List<Product> getCart() { return cart; }
}

class Admin extends User {
    public Admin(String username) {
        super(username);
    }

    public void addProduct(List<Product> productList, Product product) {
        productList.add(product);
        System.out.println(product.getName() + " has been added to the inventory.");
    }

    public void removeProduct(List<Product> productList, String productName) {
        Product productToRemove = productList.stream()
            .filter(product -> product.getName().equalsIgnoreCase(productName))
            .findFirst()
            .orElse(null);

        if (productToRemove != null) {
            productList.remove(productToRemove);
            System.out.println(productName + " has been removed from the inventory.");
        } else {
            System.out.println(productName + " not found in the inventory.");
        }
    }
}

class Order {
    private List<Product> orderItems;
    private double totalPrice;

    public Order() {
        this.orderItems = new ArrayList<>();
        this.totalPrice = 0;
    }

    public void addProduct(Product product) {
        orderItems.add(product);
    }

    public void calculateTotal() {
        totalPrice = orderItems.stream().mapToDouble(Product::getPrice).sum();
    }

    public void applyTax(double taxRate) {
        totalPrice += totalPrice * taxRate;
    }

    public void addShippingFee(double fee) {
        totalPrice += fee;
    }

    public double getTotalPrice() { return totalPrice; }

    public void printOrderDetails() {
        System.out.println("\nOrder Summary:");
        for (Product item : orderItems) {
            System.out.println(item);
        }
        System.out.println("Total Price: $" + String.format("%.2f", totalPrice));
    }
}

public class ECommercePlatform {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        List<Product> products = new ArrayList<>(Arrays.asList(
            new Electronics("Smartphone", 699.99, 12),
            new Electronics("Laptop", 1299.99, 24),
            new Clothing("Jeans", 49.99, "M", "Denim"),
            new Clothing("T-Shirt", 19.99, "L", "Cotton"),
            new Grocery("Milk", 3.99, "2024-12-31", true),
            new Grocery("Bread", 2.49, "2024-12-15", false)
        ));

        Admin admin = new Admin("admin_user");
        Customer customer = new Customer("john_doe");

        while (true) {
            System.out.println("\nWelcome to Shopify!");
            System.out.println("1. View Products by Category");
            System.out.println("2. View Cart");
            System.out.println("3. Checkout");
            System.out.println("4. Sort Products");
            System.out.println("5. Admin: Add Product");
            System.out.println("6. Admin: Remove Product");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.println("\nAvailable Categories: Electronics, Clothing, Grocery");
                    System.out.print("Enter a category: ");
                    String category = scanner.nextLine();

                    List<Product> filteredProducts = products.stream()
                        .filter(p -> p.getCategory().equalsIgnoreCase(category))
                        .collect(Collectors.toList());

                    if (filteredProducts.isEmpty()) {
                        System.out.println("No products found in this category.");
                    } else {
                        System.out.println("\nAvailable Products:");
                        for (int i = 0; i < filteredProducts.size(); i++) {
                            System.out.println((i + 1) + ". " + filteredProducts.get(i));
                        }

                        System.out.print("Enter the number of the product to add to your cart (or 0 to go back): ");
                        int productChoice = scanner.nextInt();
                        if (productChoice > 0 && productChoice <= filteredProducts.size()) {
                            customer.addToCart(filteredProducts.get(productChoice - 1));
                        }
                    }
                    break;

                case 2:
                    customer.showCart();
                    break;

                case 3:
                    if (customer.getCart().isEmpty()) {
                        System.out.println("\nYour cart is empty. Please add items before checking out.");
                    } else {
                        Order order = new Order();
                        for (Product product : customer.getCart()) {
                            order.addProduct(product);
                        }
                        order.calculateTotal();
                        order.applyTax(0.08);
                        order.addShippingFee(10.00);
                        order.printOrderDetails();

                        customer.getCart().clear();
                        System.out.println("Thank you for your purchase!");
                    }
                    break;

                case 4:
                    System.out.println("\nSort Products By:");
                    System.out.println("1. Price (Low to High)");
                    System.out.println("2. Name (A to Z)");
                    System.out.print("Enter your choice: ");
                    int sortChoice = scanner.nextInt();
                    scanner.nextLine();

                    if (sortChoice == 1) {
                        products.sort(Comparator.comparingDouble(Product::getPrice));
                    } else if (sortChoice == 2) {
                        products.sort(Comparator.comparing(Product::getName));
                    } else {
                        System.out.println("Invalid choice. Returning to main menu.");
                    }

                    System.out.println("\nSorted Products:");
                    products.forEach(System.out::println);
                    break;

                case 5:
                    System.out.print("Enter product name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter product price: ");
                    double price = scanner.nextDouble();
                    scanner.nextLine();
                    System.out.print("Enter product category: ");
                    String productCategory = scanner.nextLine();
                    admin.addProduct(products, new Product(name, price, productCategory));
                    break;

                case 6:
                    System.out.print("Enter the name of the product to remove: ");
                    String productName = scanner.nextLine();
                    admin.removeProduct(products, productName);
                    break;

                case 7:
                    System.out.println("Thank you for visiting! Goodbye!");
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
